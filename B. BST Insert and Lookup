#include <iostream>
#include <vector>
#include <algorithm>
// Implement Insert and Lookup methods of Binary Search Tree. You have to follow the template:

// The first line of input contains one integer number N (1 < N < 1000),
// that denote the number of elements in the tree.
// The second line contains N integer numbers (1 < number < 10 000).
// The third line contains one integer number M (1 < M < 1000).

// If M number exists in the tree print "YES", if not print "NO".

class BinarySearchTree {
    bool is_sorted = false;
    std::vector<long> elements;
public:

    int BinarySearch(long element) {
        if (this->elements.empty()) {
            return -1;
        }
        size_t low = 0;
        size_t high = this->elements.size() - 1;
        size_t mid = (low + high) / 2;

        while (true) {
            if (element == this->elements[mid]) {
                return mid;
            }
            else if (high == low || (high - low < 2)) {
                if (mid + 1 < this->elements.size()
                    && this->elements[mid + 1] == element)

                    return mid + 1;
                else
                    return -1;
            }
            if (element < this->elements[mid]) {
                high = mid;
            }
            if (element > this->elements[mid]) {
                low = mid;
            }
            mid = (high + low) / 2;
        }


    }

    bool Insert(int element) {
        if (this->elements.empty()) {
            this->elements.push_back(element);
        }
        else if (BinarySearch(element) == -1)
            this->elements.push_back(element);
        else
            return false;

        return true;
    }

    // Search the tree to see if it contains the element
    // return true if element exists in the tree
    // return false otherwise
    bool Lookup(int element) {
        if (!is_sorted) {
            std::sort(this->elements.begin(), this->elements.end());
        }
        return (BinarySearch(element) >= 0);
    }

};
int main() {
    int N, M, number;

    std::cin >> N;

    BinarySearchTree tree;

    for (long i = 0; i < N; i++) {
        std::cin >> number;
        tree.Insert(number);
    }
    //std::cout << tree.elements;
    std::cin >> M;

    //std::cout << tree.elements;

    std::cout << ((tree.Lookup(M)) ? "YES" : "NO") << std::endl;
}
